#!/bin/sh

#-----------------------------------------------------------------------------#  
#                                                                             #
#                                              ____                           #
#     `````````:'       .'.       `````````:' |            |..          |     #
#           ..'       .''```.           ..'   |______      |  ``..      |     #
#       ..''        .'       `.     ..''      |            |      ``..  |     #
#     .:,,,,,,,,, .'           `. .:,,,,,,,,, |___________ |          ``|     #
#                                                                             #
#                                                                             #
#-----------------------------------------------------------------------------#  

# zazen
#   -p preparation [short|long]
#   -t time in minutes
#   -k kill any running instances of zazen
#
PROGNAME=$0

usage() {
  cat << EOF >&2
Usage: $PROGNAME [-p <preparation length word>] [-d <duration>]

-p <long|medium|short>: ...
-d <duration in minutes>: ...
EOF
  exit 1
}

finish() {
    rm -f /tmp/zazen_is_running
    rm -f /tmp/zazen_request
    exit
}

playStartBell() {
    mplayer -really-quiet -softvol -volume 20 /home/kapu/mySounds/zen/undo/edited/begin_daikei.wav
}

playIntervalBell() {
    mplayer -really-quiet -softvol -volume 30 /home/kapu/mySounds/zen/PlumVillage_bell.000.wav
}

playEndBell() {
    mplayer -really-quiet -softvol -volume 100 /home/kapu/mySounds/zen/390201__ganapataye__02-bells.aiff
}

trap finish INT
trap finish EXIT

# if there are no args print usage and exit
if [[ $# -eq 0 ]] ; then
    usage
    exit 0
fi

# is play interval enabled/disabled?
if [[ -f /var/lib/zazen/zazen_interval_boolean ]] ; then
    echo zazen_interval_boolean found
    cat /var/lib/zazen/zazen_interval_boolean | grep -o enabled &&  zazen_interval_boolean=enabled || zazen_interval_boolean=disabled
else
    echo disabled>/var/lib/zazen/zazen_interval_boolean
    zazen_interval_boolean=disabled
fi

prep=none
duration=20
while getopts p:d:k o; do
  case $o in
    (p) prep=$OPTARG;;
    (d) duration=$OPTARG;;
    (k) kill=1;;
    (*) usage
  esac
done
shift "$((OPTIND - 1))"

if [ ! -z "$kill" ];then
while read line;do
kill -9 $line
done << EOF
`cat /tmp/zazen_is_running`
EOF
/home/kapu/bin/coin
exit 0
fi

if [ -e /tmp/zazen_is_running ]; then
  echo zazen is already running...
  exit 1
else
  touch /tmp/zazen_is_running
  echo $$ >> /tmp/zazen_is_running
fi

echo Remaining arguments: "$@"

# ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t 1200 -q:a 9 -acodec libmp3lame out.mp3
if [ "$prep" = short ];then
    prepSound=/home/kapu/mySounds/zen/undo/edited/ready_short.wav
elif [ "$prep" = medium ];then
    prepSound=/home/kapu/mySounds/zen/undo/edited/ready_middle.wav
elif [ "$prep" = long ];then
    prepSound=/home/kapu/mySounds/zen/undo/edited/ready_long.wav
fi

echo $prepSound > /tmp/debug00_prepSound.txt
if [ "$prep" != none ]; then
mplayer "$prepSound"
fi

startTimestamp=`date +%s`
playStartBell

if [[ "foo$zazen_interval_boolean" == fooenabled ]];then
    interval=5 #minutes between interval bells
    endtime=$(( $startTimestamp + $(($duration * 60)) ))

    # if seconds left to end -gt seconds in an interval, play sound
    if [ $(( $endtime - `date +%s` )) -gt $(( $interval * 60 )) ] ; then
        while sleep $(($interval * 60));do
            playIntervalBell
            # if seconds left to end -le seconds in an interval, break
            if [ $(( $endtime - `date +%s`)) -le $(( $interval * 60 )) ]; then # -le so that we don't play interval bell right before end bell
                break
            fi
        done
        while [ `date +%s` -lt $endtime ];do
            sleep 1
        done
    fi
else
    echo sleeping $(($duration * 60)) seconds
    sleep $(($duration * 60))
fi

# Play exit bell
playEndBell

# clean up
rm -f /tmp/zazen_request



